<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Elite</title>
    <link>https://thalnoon.github.io/my-university-project/</link>
    <description>Recent content on Elite</description>
    <generator>Hugo -- 0.145.0</generator>
    <language>en</language>
    <atom:link href="https://thalnoon.github.io/my-university-project/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Chapter 1: Introduction to Python</title>
      <link>https://thalnoon.github.io/my-university-project/chapters/chapter-1/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://thalnoon.github.io/my-university-project/chapters/chapter-1/</guid>
      <description>This chapter covers the basics of the subject&amp;hellip;</description>
    </item>
    <item>
      <title>Chapter 2: How Python Runs Programs</title>
      <link>https://thalnoon.github.io/my-university-project/chapters/chapter-2/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://thalnoon.github.io/my-university-project/chapters/chapter-2/</guid>
      <description>&lt;h2 id=&#34;introducing-the-python-interpreter&#34;&gt;Introducing the Python Interpreter&lt;/h2&gt;
&lt;p&gt;Python is a software package called an interpreter—a program that executes other programs. When you write a Python program, the Python interpreter reads your code and carries out the instructions it contains.&lt;/p&gt;
&lt;p&gt;After installation on your machine, the Python package generates a few components—minimally, an interpreter and a support library. Depending on how you use it, the Python interpreter may be an executable program or a set of libraries linked into another program. The Python code you write must always be run by this interpreter. To enable that, you must install a Python interpreter on your computer.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Chapter 3: How You Run the Programs</title>
      <link>https://thalnoon.github.io/my-university-project/chapters/chapter-3/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://thalnoon.github.io/my-university-project/chapters/chapter-3/</guid>
      <description>&lt;p&gt;There are a variety of ways to tell Python to execute the code you type. Along the way, you’ll learn how to type code interactively and how to save it in files to be run with system command lines, icon clicks, module imports and reloads, &lt;code&gt;exec&lt;/code&gt; calls, menu options in GUIs such as IDLE, and more.&lt;/p&gt;
&lt;h2 id=&#34;the-interactive-prompt&#34;&gt;The Interactive Prompt&lt;/h2&gt;
&lt;p&gt;Perhaps the simplest way to run Python programs is to type them at Python’s interactive command line, sometimes called the interactive prompt. There are a variety of ways to start this command line: in an IDE, from a system console, and so on. Assuming the interpreter is installed as an executable program on your system, the most platform-neutral way to start an interactive interpreter session is usually just to type &lt;code&gt;python&lt;/code&gt; at your operating system’s prompt, without any arguments.&lt;br&gt;
For example:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Chapter 4: Object Types</title>
      <link>https://thalnoon.github.io/my-university-project/chapters/chapter-4/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://thalnoon.github.io/my-university-project/chapters/chapter-4/</guid>
      <description>&lt;p&gt;Python programs can be decomposed into modules, statements, expressions, and objects, as follows:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Programs are composed of modules.&lt;/li&gt;
&lt;li&gt;Modules contain statements.&lt;/li&gt;
&lt;li&gt;Statements contain expressions.&lt;/li&gt;
&lt;li&gt;Expressions create and process objects.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;pythons-core-data-types&#34;&gt;Python’s Core Data Types&lt;/h2&gt;
&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th&gt;Object type&lt;/th&gt;
          &lt;th&gt;Example literals/creation&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td&gt;Numbers&lt;/td&gt;
          &lt;td&gt;1234, 3.1415, 3+4j, Decimal, Fraction&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;Strings&lt;/td&gt;
          &lt;td&gt;&amp;lsquo;spam&amp;rsquo;, &amp;ldquo;guido&amp;rsquo;s&amp;rdquo;, b&amp;rsquo;a\x01c&amp;rsquo;&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;Lists&lt;/td&gt;
          &lt;td&gt;[1, [2, &amp;rsquo;three&amp;rsquo;], 4]&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;Dictionaries&lt;/td&gt;
          &lt;td&gt;{&amp;lsquo;food&amp;rsquo;: &amp;lsquo;spam&amp;rsquo;, &amp;rsquo;taste&amp;rsquo;: &amp;lsquo;yum&amp;rsquo;}&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;Tuples&lt;/td&gt;
          &lt;td&gt;(1, &amp;lsquo;spam&amp;rsquo;, 4, &amp;lsquo;U&amp;rsquo;)&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;Files&lt;/td&gt;
          &lt;td&gt;myfile = open(&amp;rsquo;eggs&amp;rsquo;, &amp;lsquo;r&amp;rsquo;)&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;Sets&lt;/td&gt;
          &lt;td&gt;set(&amp;lsquo;abc&amp;rsquo;), {&amp;lsquo;a&amp;rsquo;, &amp;lsquo;b&amp;rsquo;, &amp;lsquo;c&amp;rsquo;}&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;Other core types&lt;/td&gt;
          &lt;td&gt;Booleans, types, None&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;Program unit types&lt;/td&gt;
          &lt;td&gt;Functions, modules, classes&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;Implementation-related types&lt;/td&gt;
          &lt;td&gt;Compiled code, stack tracebacks&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;numbers&#34;&gt;Numbers&lt;/h2&gt;
&lt;p&gt;Numbers in Python support the normal mathematical operations. For instance, the plus sign (&lt;code&gt;+&lt;/code&gt;) performs addition, a star (&lt;code&gt;*&lt;/code&gt;) is used for multiplication, and two stars (&lt;code&gt;**&lt;/code&gt;) are used for exponentiation:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Chapter 5: Numeric Types</title>
      <link>https://thalnoon.github.io/my-university-project/chapters/chapter-5/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://thalnoon.github.io/my-university-project/chapters/chapter-5/</guid>
      <description>&lt;p&gt;Let’s get started by exploring our first data type category: Python’s numeric types.&lt;/p&gt;
&lt;h2 id=&#34;numeric-type-basics&#34;&gt;Numeric Type Basics&lt;/h2&gt;
&lt;p&gt;A complete inventory of Python’s numeric toolbox includes:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Integers and floating-point numbers&lt;/li&gt;
&lt;li&gt;Complex numbers&lt;/li&gt;
&lt;li&gt;Fixed-precision decimal numbers&lt;/li&gt;
&lt;li&gt;Rational fraction numbers&lt;/li&gt;
&lt;li&gt;Sets&lt;/li&gt;
&lt;li&gt;Booleans&lt;/li&gt;
&lt;li&gt;Unlimited integer precision&lt;/li&gt;
&lt;li&gt;A variety of numeric built-ins and modules&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;We will present a brief overview of how we write and process numbers in our scripts.&lt;/p&gt;
&lt;h2 id=&#34;numeric-literals&#34;&gt;Numeric Literals&lt;/h2&gt;
&lt;p&gt;Among its basic types, Python provides integers (positive and negative whole numbers) and floating-point numbers (numbers with a fractional part, sometimes called &amp;ldquo;floats&amp;rdquo; for economy). Table 1 (not shown) illustrates what Python’s numeric types look like when written as literals.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Chapter 6: Strings</title>
      <link>https://thalnoon.github.io/my-university-project/chapters/chapter-6/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://thalnoon.github.io/my-university-project/chapters/chapter-6/</guid>
      <description>&lt;hr&gt;
&lt;h2 id=&#34;string-literals&#34;&gt;String Literals&lt;/h2&gt;
&lt;p&gt;There are many ways to write strings in your code:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Single quotes:&lt;/strong&gt; &lt;code&gt;&#39;spa&amp;quot;m&#39;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Double quotes:&lt;/strong&gt; &lt;code&gt;&amp;quot;spa&#39;m&amp;quot;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Triple quotes:&lt;/strong&gt; &lt;code&gt;&#39;&#39;&#39;... spam ...&#39;&#39;&#39;&lt;/code&gt; or &lt;code&gt;&amp;quot;&amp;quot;&amp;quot;... spam ...&amp;quot;&amp;quot;&amp;quot;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Escape sequences:&lt;/strong&gt; &lt;code&gt;&amp;quot;s\tp\na\0m&amp;quot;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Raw strings:&lt;/strong&gt; &lt;code&gt;r&amp;quot;C:\new\test.spm&amp;quot;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;And the following is a list of all the possible operations that utilize or benefit the use of string literals&lt;/p&gt;
&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th&gt;Operation&lt;/th&gt;
          &lt;th&gt;Interpretation&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td&gt;S = &#39;&#39;&lt;/td&gt;
          &lt;td&gt;Empty string&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;S = &amp;ldquo;spam&amp;rsquo;s&amp;rdquo;&lt;/td&gt;
          &lt;td&gt;Double quotes, same as single&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;S = &amp;rsquo;s\np\ta\x00m&#39;&lt;/td&gt;
          &lt;td&gt;Escape sequences&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;S = &amp;ldquo;&amp;rdquo;&amp;quot;&amp;hellip;&amp;quot;&amp;quot;&amp;quot;&lt;/td&gt;
          &lt;td&gt;Triple-quoted block strings&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;S = r&amp;rsquo;\temp\spam&#39;&lt;/td&gt;
          &lt;td&gt;Raw strings&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;S = b&amp;rsquo;spam&#39;&lt;/td&gt;
          &lt;td&gt;Byte strings in 3.0&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;S = u&amp;rsquo;spam&#39;&lt;/td&gt;
          &lt;td&gt;Unicode strings in 2.6 only&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;S1 + S2&lt;/td&gt;
          &lt;td&gt;Concatenate, repeat&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;S * 3&lt;/td&gt;
          &lt;td&gt;&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;S[i]&lt;/td&gt;
          &lt;td&gt;Index, slice, length&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;S[i:j]&lt;/td&gt;
          &lt;td&gt;&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;len(S)&lt;/td&gt;
          &lt;td&gt;&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&amp;ldquo;a %s parrot&amp;rdquo; % kind&lt;/td&gt;
          &lt;td&gt;String formatting expression&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&amp;ldquo;a {0} parrot&amp;rdquo;.format(kind)&lt;/td&gt;
          &lt;td&gt;String formatting method in 2.6 and 3.0&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;S.find(&amp;lsquo;pa&amp;rsquo;)&lt;/td&gt;
          &lt;td&gt;String method calls: search,&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;S.rstrip()&lt;/td&gt;
          &lt;td&gt;remove whitespace,&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;S.replace(&amp;lsquo;pa&amp;rsquo;, &amp;lsquo;xx&amp;rsquo;)&lt;/td&gt;
          &lt;td&gt;replacement,&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;S.split(&amp;rsquo;,&amp;rsquo;)&lt;/td&gt;
          &lt;td&gt;split on delimiter,&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;S.isdigit()&lt;/td&gt;
          &lt;td&gt;content test,&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;S.lower()&lt;/td&gt;
          &lt;td&gt;case conversion,&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;S.endswith(&amp;lsquo;spam&amp;rsquo;)&lt;/td&gt;
          &lt;td&gt;end test,&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&amp;lsquo;spam&amp;rsquo;.join(strlist)&lt;/td&gt;
          &lt;td&gt;delimiter join,&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;S.encode(&amp;rsquo;latin-1&amp;rsquo;)&lt;/td&gt;
          &lt;td&gt;Unicode encoding, etc.&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;for x in S: print(x)&lt;/td&gt;
          &lt;td&gt;Iteration, membership&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&amp;lsquo;spam&amp;rsquo; in S&lt;/td&gt;
          &lt;td&gt;&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;[c* 2 for c in S]&lt;/td&gt;
          &lt;td&gt;&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;map(ord, S)&lt;/td&gt;
          &lt;td&gt;Unicode&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;The single- and double-quoted forms are by far the most common.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Chapter 7: Lists &amp; Dictionaries</title>
      <link>https://thalnoon.github.io/my-university-project/chapters/chapter-7/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://thalnoon.github.io/my-university-project/chapters/chapter-7/</guid>
      <description>&lt;p&gt;The list and dictionary object types are the main workhorses in almost all Python scripts. They are used to store, organize, and retrieve data efficiently. In this chapter, we cover how lists and dictionaries work, their basic operations, and how to modify them in-place.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;lists&#34;&gt;Lists&lt;/h2&gt;
&lt;p&gt;Lists are ordered collections of arbitrary objects. Unlike strings, lists can contain any type of object—including numbers, strings, and even other lists. Lists are mutable, meaning you can change their contents in-place using assignment (to individual items or slices), method calls, deletion statements, and more. Key properties include:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Chapter 8: Tuples, Files, and Everything Else</title>
      <link>https://thalnoon.github.io/my-university-project/chapters/chapter-8/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://thalnoon.github.io/my-university-project/chapters/chapter-8/</guid>
      <description>&lt;hr&gt;
&lt;p&gt;The file object is a commonly used and full-featured tool for processing files; the basic overview here is supplemented by larger examples in later chapters.&lt;/p&gt;
&lt;h2 id=&#34;tuples&#34;&gt;Tuples&lt;/h2&gt;
&lt;p&gt;The last collection type in our survey is the Python tuple. Tuples construct simple groups of objects. They work exactly like lists, except that tuples can’t be changed in-place (they’re immutable) and are usually written as a series of items in parentheses, not square brackets. Although they don’t support as many methods, tuples share most of their properties with lists. Here’s a quick look at the basics.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Chapter 9: Introducing Python Statements</title>
      <link>https://thalnoon.github.io/my-university-project/chapters/chapter-9/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://thalnoon.github.io/my-university-project/chapters/chapter-9/</guid>
      <description>&lt;hr&gt;
&lt;p&gt;The statements are the things you write to tell Python what your programs should do. If programs “do things with stuff,” statements are the way you specify what sort of things a program does. Python is a procedural, statement-based language; by combining statements, you specify a procedure that Python performs to satisfy a program’s goals.&lt;/p&gt;
&lt;h2 id=&#34;python-program-structure-revisited&#34;&gt;Python Program Structure Revisited&lt;/h2&gt;
&lt;p&gt;Another way to understand the role of statements is to revisit the concept hierarchy, which talked about built-in objects and the expressions used to manipulate them. The hierarchy levels are:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Chapter 10: if Tests and Syntax Rules</title>
      <link>https://thalnoon.github.io/my-university-project/chapters/chapter-10/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://thalnoon.github.io/my-university-project/chapters/chapter-10/</guid>
      <description>&lt;p&gt;This chapter presents the Python &lt;strong&gt;if&lt;/strong&gt; statement, the main tool for selecting from alternative actions based on test results. Because this is our first in-depth look at compound statements—statements that embed other statements—we also explore the general concepts behind Python’s statement syntax model.&lt;/p&gt;
&lt;h2 id=&#34;if-statements&#34;&gt;if Statements&lt;/h2&gt;
&lt;p&gt;In simple terms, the Python &lt;strong&gt;if&lt;/strong&gt; statement selects actions to perform. It is the primary selection tool in Python and represents much of the logic a Python program possesses. Being a compound statement, an &lt;strong&gt;if&lt;/strong&gt; statement may contain other statements, including additional &lt;strong&gt;if&lt;/strong&gt; statements. Python lets you combine statements sequentially (so they execute one after another) and nest them arbitrarily (so they execute only under certain conditions).&lt;/p&gt;</description>
    </item>
    <item>
      <title>Chapter 11: While and For loops</title>
      <link>https://thalnoon.github.io/my-university-project/chapters/chapter-11/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://thalnoon.github.io/my-university-project/chapters/chapter-11/</guid>
      <description>&lt;p&gt;This chapter presents two main looping constructs—statements that repeat an action over and over. The first is the &lt;strong&gt;while&lt;/strong&gt; statement, which provides a way to code general loops, and the second is the &lt;strong&gt;for&lt;/strong&gt; statement, which is designed for stepping through the items in a sequence object and running a block of code for each.&lt;/p&gt;
&lt;h2 id=&#34;while-loops&#34;&gt;while Loops&lt;/h2&gt;
&lt;p&gt;Python’s &lt;strong&gt;while&lt;/strong&gt; statement is the most general iteration construct in the language. In simple terms, it repeatedly executes a block of indented statements as long as a test at the top keeps evaluating to a true value. Control loops back to the start of the statement until the test becomes false. When the test becomes false, control passes to the statement following the while block. If the test is false from the beginning, the loop body never runs.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Chapter 12: Functions Basics</title>
      <link>https://thalnoon.github.io/my-university-project/chapters/chapter-12/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://thalnoon.github.io/my-university-project/chapters/chapter-12/</guid>
      <description>&lt;p&gt;In the previous part, we looked at basic procedural statements in Python. Here, we move on to explore a set of additional statements that we can use to create functions of our own. In simple terms, a function is a device that groups a set of statements so they can be run more than once in a program. Functions can compute a result value and allow us to specify parameters that serve as function inputs, which may differ each time the code is run. Coding an operation as a function makes it a generally useful tool that can be used in a variety of contexts.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Chapter 13: Scopes &amp; Arguments</title>
      <link>https://thalnoon.github.io/my-university-project/chapters/chapter-13/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://thalnoon.github.io/my-university-project/chapters/chapter-13/</guid>
      <description>&lt;p&gt;We will present the details behind Python’s scopes and arguments—the places where variables are defined and looked up. Like module files, scopes help prevent name clashes across your program’s code; names defined in one program unit don’t interfere with names in another. We’ll also see that scope usage can have a major impact on program maintenance; for example, overuse of globals is generally bad. On the plus side, scopes provide a way to retain state information between function calls and can sometimes offer an alternative to classes.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
